// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GeneratorProject.Platforms.Frontend.Ionic
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Scaffold.BaseGenerators.TextTemplating;
    using Mobioos.Foundation.Jade.Models;
    using Common.Generator.Framework.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Mobioos_Ver_2.0 --10.11.19\IonicGenerator\IonicGenerator\GeneratorProject\Platforms\Frontend\Ionic\Shared\Templates\Services\AuthClient\OidcSecurityService.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class OidcSecurityService : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("import {EventEmitter, Injectable} from \'@angular/core\';\r\nimport {User, UserManage" +
                    "r} from \'oidc-client\';\r\nimport {OidcConfigurationService} from \'./oidc-configura" +
                    "tion.service\';\r\nimport {asapScheduler, BehaviorSubject, Observable} from \'rxjs\';" +
                    "\r\nimport {fromPromise} from \'rxjs/internal-compatibility\';\r\nimport {filter, map," +
                    " mapTo, take} from \'rxjs/operators\';\r\n\r\n\r\n@Injectable()\r\nexport class OidcSecuri" +
                    "tyService {\r\n  tokenExpired = new EventEmitter<boolean>();\r\n  private _userManag" +
                    "er: UserManager;\r\n  private _userLoaded$ = new BehaviorSubject(false);\r\n  privat" +
                    "e _currentUser: User;\r\n\r\n  constructor(private config: OidcConfigurationService)" +
                    " {\r\n    this.config.loaded$.pipe(take(1)).subscribe(() => {\r\n      this._userMan" +
                    "ager = new UserManager(config.authSettings);\r\n      this._setupEvents();\r\n    })" +
                    ";\r\n  }\r\n\r\n  authorize() {\r\n    return fromPromise(this._userManager.signinRedire" +
                    "ct(), asapScheduler);\r\n  }\r\n\r\n  getUserData(): Observable<any> {\r\n    return thi" +
                    "s._userLoaded$.asObservable().pipe(filter(_ => !!_), map(() => {\r\n      return t" +
                    "his._currentUser ? this._currentUser.profile : null;\r\n    }));\r\n  }\r\n\r\n  getToke" +
                    "n(): string {\r\n    if (this._userLoaded$.getValue()) {\r\n      return this._curre" +
                    "ntUser ? this._currentUser.access_token : null;\r\n    }\r\n    return null;\r\n  }\r\n\r" +
                    "\n\r\n  authorizedCallback(): Observable<any> {\r\n    return fromPromise(this._userM" +
                    "anager.signinRedirectCallback());\r\n  }\r\n\r\n  getIsAuthorized() {\r\n    return this" +
                    "._userLoaded$.asObservable().pipe(\r\n      filter(_ => _),\r\n      mapTo(!!this._c" +
                    "urrentUser)\r\n    );\r\n  }\r\n\r\n  logoff() {\r\n    return fromPromise(this._userManag" +
                    "er.signoutRedirect(), asapScheduler);\r\n  }\r\n\r\n  logoffCallback() {\r\n    return f" +
                    "romPromise(this._userManager.signoutRedirectCallback(), asapScheduler);\r\n  }\r\n\r\n" +
                    "  private _setupEvents() {\r\n    this._userManager.events.addUserLoaded((user) =>" +
                    " this.setUser(user));\r\n    this._userManager.events.addAccessTokenExpired(() => " +
                    "{\r\n      this.tokenExpired.emit(true);\r\n    });\r\n    this._userManager.getUser()" +
                    ".then((user) => this.setUser(user));\r\n  }\r\n\r\n  private setUser(user) {\r\n    this" +
                    "._currentUser = user;\r\n    this._userLoaded$.next(true);\r\n  }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
